from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
# from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from keyboards.default import main_menu_user_keyboard, cancel_keyboard
from keyboards.inline import cabinet_keyboard, deposit_choose_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.inline.callback_datas import cabinet_callback, deposit_callback
from utils.db_api import db
from utils import check_payment
from data import config
import aiogram.utils.markdown as md
from states.promocode_check import promocode_check
from loader import dp

clear_keyboard = types.ReplyKeyboardRemove(selective=False)

def cabinet_message(user):
    msg_text = md.text(
            md.text("id: " + str(user['telegram_id'])),
            md.text("–ë–∞–ª–∞–Ω—Å [–†—É–±–ª–∏]: " + str(user['balance_rub'])),
            md.text("–ë–∞–ª–∞–Ω—Å [–ë–∞–ª–ª—ã]: " + str(user['balance_points'])),
            md.text(),
            md.text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"),
            md.text(),
            md.text("–ò–≥—Ä—ã: " + str(user['games'])),
            md.text("–ü–æ–±–µ–¥—ã: " + str(user['wins'])),
            md.text("–ü—Ä–æ–∏–≥—Ä—ã—à–∏: " + str(int(user['games']) - int(user['wins']))),
            sep='\n',
        )
    return msg_text

def payment_message(qiwi_number, code):
    msg_text = md.text(
            md.text("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ QIWI:"),
            md.text("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"),
            md.text("üëâ –ù–æ–º–µ—Ä " + str(qiwi_number)),
            md.text("üëâ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π " + str(code)),
            md.text(),
            md.text("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10‚ÇΩ"),
            md.text("‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!"),
            sep='\n',
        )
    return msg_text

clear_keyboard = types.ReplyKeyboardRemove(selective=False)
@dp.message_handler(lambda message: message.text.lower() == "–∫–∞–±–∏–Ω–µ—Ç", state=None)
async def cabinet_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = db.check_user_exists(user_id)
    if not user:
        await message.answer("you are not registered, type /start")
        return
    
    await message.answer(
        cabinet_message(user),
        reply_markup=cabinet_keyboard
    )
    
@dp.callback_query_handler(cabinet_callback.filter(action="points"))
async def get_points_handler(call: types.CallbackQuery):
    # await call.answer(cache_time=3600)
    
    #TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —é–∑–µ—Ä–æ–º
    
    # def check_last_time_take_points():
    #     pass
    
    # if not check_last_time_take_points():
    #     return
    
    user_id = call.from_user.id
    db.add_points(user_id)
    user = db.check_user_exists(user_id)
    await call.message.edit_text(
        cabinet_message(user),
        reply_markup=cabinet_keyboard
    )


@dp.callback_query_handler(cabinet_callback.filter(action="deposit"))
async def deposit_handler(call: types.CallbackQuery):
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞",
        reply_markup=deposit_choose_keyboard,
    )

# DONE: –¥–æ–±–∞–≤–∏—Ç—å —Ö–∞–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤    
@dp.callback_query_handler(deposit_callback.filter(type="promo"))
async def promo_deposit_handler(call: types.CallbackQuery):
    await promocode_check.get_promocode.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=cancel_keyboard)
    
@dp.message_handler(state=promocode_check.get_promocode)
async def promo_check_handler(message: types.Message, state: FSMContext):
    promocode = message.text
    if promocode == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            f"–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=main_menu_user_keyboard
        )
        return
    p_c = db.get_promo(promocode)
    if not p_c:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    async with state.proxy() as data:
        data['code'] = promocode
    if p_c['used'] == 0:
        await promocode_check.complete.set()
        prom_amount = p_c['amount']
        await message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {p_c['amount']}?\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ +"
        )
    else:
        await message.answer(
            f"–ü—Ä–æ–º–æ–∫–æ–¥ ‚Ññ{promocode} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ï—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.",
            reply_markup=main_menu_user_keyboard
        )
        await state.finish()
    
@dp.message_handler(state=promocode_check.complete)
async def promo_complete_handler(message: types.Message, state: FSMContext):
    answer = message.text
    user_id = message.from_user.id
    
    if answer == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            f"–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=main_menu_user_keyboard
        )
        return

    if answer == "+":
        async with state.proxy() as data:
            promo = db.get_promo(data['code'])
            db.change_user_rub_balance(user_id, promo['amount'])
            sum = promo['amount']
            await message.answer(
                f"–í–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {sum}. –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!",
                reply_markup=main_menu_user_keyboard
            )
            db.make_promo_used(data['code'])
            await state.finish()
    else:
        await state.finish()
        await message.answer(
            f"–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=main_menu_user_keyboard
        )
        return
    


# TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ö–∞–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤

@dp.callback_query_handler(deposit_callback.filter(type="qiwi"))
async def qiwi_deposit_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    db.create_payment(user_id)
    
    code = user_id
    payment_url = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={config.QIWI_NUMBER}&amountFraction=0&extra%5B%27comment%27%5D={code}&currency=643&&blocked[0]=account&&blocked[1]=comment"
    
    deposit_check_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=payment_url),
            ],
            [
                InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=deposit_callback.new(type="check")),
                InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=deposit_callback.new(type="cancel")),
            ]
        ]
    )
    
    await call.message.edit_text(
        payment_message(config.QIWI_NUMBER, db.check_old_payments(user_id)),
        reply_markup=deposit_check_keyboard,
    )
    
    
@dp.callback_query_handler(deposit_callback.filter(type="check"))
async def qiwi_deposit_check_handler(call: types.CallbackQuery):
    await call.answer(cache_time=10)
    user_id = call.from_user.id
    code = db.check_old_payments(user_id)
    if not code:
        #TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µt –ø–ª–∞—Ç–µ–∂–∞(error)
        pass
    
    amount = check_payment(code)
    # TODO: –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª(–º–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å middlewares –∫—É–¥–∞ –±—É–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–Ω—Å—Ç–∞–Ω—Å —é–∑–µ—Ä–∞ –∏ —Å–æ–æ—Ç–≤ –æ—Ç—Ç—É–¥–∞ –±—Ä–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏)
    if not amount:
        payment_url = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={config.QIWI_NUMBER}&amountFraction=0&extra%5B%27comment%27%5D={code}&currency=643&&blocked[0]=account&&blocked[1]=comment"
    
        deposit_check_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=payment_url),
                ],
                [
                    InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=deposit_callback.new(type="check")),
                    InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=deposit_callback.new(type="cancel")),
                ]
            ]
        )
        msg = md.text(
            md.text("‚ö†Ô∏è–ü–æ–∫–∞ —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–ª—É—á–µ–Ω"),
            md.text("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"),
            md.text("üëâ –ù–æ–º–µ—Ä " + str(config.QIWI_NUMBER)),
            md.text("üëâ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π " + str(code)),
            md.text(),
            md.text("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10‚ÇΩ"),
            md.text("‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!"),
            sep='\n',
        )
        await call.message.edit_text(
            msg,
            reply_markup=deposit_check_keyboard,
        )
        # return
    
    else:
        db.set_sum_payment(user_id, amount)
        db.change_payment_status(user_id, "done")
        db.change_user_rub_balance(user_id, amount)
        await call.message.edit_text(
            '–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ' + int(amount),
        )

# DONE: make cancel button work
@dp.callback_query_handler(deposit_callback.filter(type="cancel"))
async def qiwi_deposit_cancel_handler(call:types.CallbackQuery):
    await call.answer(cache_time=10)
    
    
    
    await call.message.delete()
    await call.message.answer(
        "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω."
    )
    
    